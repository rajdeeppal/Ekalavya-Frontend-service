user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    server {
        listen 80;
        server_name ec2-13-232-188-255.ap-south-1.compute.amazonaws.com;

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name ec2-13-232-188-255.ap-south-1.compute.amazonaws.com;

        ssl_certificate /home/ubuntu/certs/certificate.pem;
        ssl_certificate_key /home/ubuntu/certs/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Serve React frontend
        location / {
            root /var/www/html;
            index index.html;
            try_files $uri /index.html;
        }

        # Proxy API requests to backend
        location /api/ {
            proxy_pass http://3.111.84.98:61002;  # Backend runs on HTTP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Connection "keep-alive";
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Accept-Encoding "";
        }

        # Handle React routing (serve index.html for 404 errors)
        error_page 404 /index.html;
    }
}